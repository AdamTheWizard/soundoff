{"version":3,"sources":["components/Searchbar.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","props","className","onSubmit","handleSubmit","type","id","placeholder","onChange","handleChange","value","Card","href","link","src","artwork","title","App","state","ArrayVA","bind","e","preventDefault","searchValue","document","querySelector","fetch","then","response","json","data","console","log","setState","map","item","artwork_url","permalink_url","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kPAqBeA,MAjBf,SAAmBC,GACf,OACI,yBAAKC,UAAU,kBACf,0BAAMC,SAAUF,EAAMG,cAClB,2BACCC,KAAK,OACLC,GAAG,aACHJ,UAAU,aACVK,YAAaN,EAAMM,YACnBC,SAAUP,EAAMQ,eAEjB,2BAAOJ,KAAK,SAASC,GAAG,SAASJ,UAAU,SAASQ,MAAM,cCAvDC,MAbf,SAAcV,GACV,OACJ,uBAAGW,KAAMX,EAAMY,MACP,yBAAKX,UAAU,kBACX,yBAAKY,IAAKb,EAAMc,UAChB,wBAAIb,UAAU,cAAcD,EAAMe,OAClC,+CC4CGC,E,YA3Cb,WAAYhB,GAAO,IAAD,8BAChB,4CAAMA,KACDiB,MAAQ,CACXC,QAAS,IAEX,EAAKf,aAAe,EAAKA,aAAagB,KAAlB,gBALJ,E,0EAOLC,GAAG,IAAD,OACbA,EAAEC,iBACF,IAAIC,EAAcC,SAASC,cAAc,eAAef,MAExDgB,MAAM,uCAAyCH,EAAa,+CACzDI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACV,EAAKG,SAAS,CACZd,QAASW,EAAKI,KAAI,SAACC,GAAD,OAChB,kBAAC,EAAD,CACEnB,MAAOmB,EAAKnB,MACZD,QAASoB,EAAKC,YACdvB,KAAMsB,EAAKE,qBAIrBN,QAAQC,W,+BAIZ,OACA,yBAAK9B,UAAU,OACb,kBAAC,EAAD,CAAWK,YAAY,YAAYH,aAAckC,KAAKlC,eAEtD,yBAAKF,UAAU,mBAAmBoC,KAAKpB,MAAMC,c,GAjCjCoB,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASwB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.e56c67f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nfunction Searchbar(props){ \r\n    return (\r\n        <div className=\"form-container\">\r\n        <form onSubmit={props.handleSubmit}>\r\n            <input\r\n             type=\"text\"\r\n             id=\"search-box\"\r\n             className=\"search-box\"\r\n             placeholder={props.placeholder}\r\n             onChange={props.handleChange}\r\n            ></input>\r\n            <input type=\"submit\" id=\"submit\" className=\"submit\" value=\"SUBMIT\"></input>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","import React from \"react\"\r\n\r\nfunction Card(props) {\r\n    return (\r\n<a href={props.link}>\r\n        <div className=\"card-container\">\r\n            <img src={props.artwork} />\r\n            <h4 className=\"card-title\">{props.title}</h4>\r\n            <small>View more</small>\r\n        </div>\r\n            </a>\r\n\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react';\nimport './App.css';\nimport Searchbar from './components/Searchbar';\nimport Card from './components/Card';\n\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      ArrayVA: []\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleSubmit(e){\n    e.preventDefault();\n    let searchValue = document.querySelector(\"#search-box\").value;\n  \n    fetch(\"https://api.soundcloud.com/tracks?q=\" + searchValue +\"&client_id=PGBAyVqBYXvDBjeaz3kSsHAMnr1fndq1\")\n      .then(response => response.json())\n        .then(data => {\n          console.log(data)\n            this.setState({\n              ArrayVA: data.map((item) => (\n                <Card \n                  title={item.title}\n                  artwork={item.artwork_url}\n                  link={item.permalink_url}\n                />\n              ))\n            })\n        console.log()\n    })\n  }\n  render(){\n    return (\n    <div className=\"App\">\n      <Searchbar placeholder=\"Search...\" handleSubmit={this.handleSubmit} />\n\n      <div className=\"cards-container\">{this.state.ArrayVA}</div>\n    </div>\n    )\n  }\n}\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}